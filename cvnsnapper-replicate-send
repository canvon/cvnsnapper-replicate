#!/bin/bash

warn() {
	echo "${0##*/}: $*" >&2
}

die() {
	warn "Fatal: $*"
	exit 1
}


USAGE="Usage: $0 OUTPUT_PREFIX [LAST_SNAPSHOT_NUMBER]"

while [ "$#" -ge 1 ] && [ "${1:0:1}" = "-" ]
do
	case "$1" in
	--help|--usage)
		shift
		echo "$USAGE"
		exit 0
		;;
	*)
		die "Invalid option \"$1\""
		;;
	esac
done

[ "$#" -ge 1 ] || die "$USAGE"

OUTPUT_PREFIX="$1"; shift
LAST_SNAPSHOT_NUMBER_ARG=

[ "$#" -ge 1 ] && { LAST_SNAPSHOT_NUMBER_ARG="$1"; shift; }

[ "$#" -eq 0 ] || die "Too many arguments -- $USAGE"


LAST_SNAPSHOT_NUMBER_ARG_REACHED=0
LAST_SNAPSHOT_NUMBER=

while read SNAPSHOT_NUMBER
do
	# Skip snapshots silently until last-arg, if last-arg was given.
	if [ -n "$LAST_SNAPSHOT_NUMBER_ARG" ] && [ "$LAST_SNAPSHOT_NUMBER_ARG_REACHED" -eq 0 ]
	then
		[ "$SNAPSHOT_NUMBER" -lt "$LAST_SNAPSHOT_NUMBER_ARG" ] && continue

		[ "$SNAPSHOT_NUMBER" -eq "$LAST_SNAPSHOT_NUMBER_ARG" ] || die "Last snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\" missing"

		LAST_SNAPSHOT_NUMBER_ARG_REACHED=1
		LAST_SNAPSHOT_NUMBER="$SNAPSHOT_NUMBER"
		continue
	fi

	echo -n "snapper snapshot number $SNAPSHOT_NUMBER: "

	SNAPSHOT_INFO="$SNAPSHOT_NUMBER/info.xml"
	[ -f "$SNAPSHOT_INFO" ] || { echo "(error)"; die "Missing info.xml at snapper snapshot number $SNAPSHOT_NUMBER"; }

	SNAPSHOT_NUM=$(sed -n -e 's#^.*<num>\([^<]*\)</num>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER num: sed failed"; }
	[ "$SNAPSHOT_NUMBER" = "$SNAPSHOT_NUM" ] || { echo "(error)"; die "Meta-data \"num\" does not match at snapper snapshot number $SNAPSHOT_NUMBER "; }

	SNAPSHOT_DATE=$(sed -n -e 's#^.*<date>\([^<]*\)</date>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER date: sed failed"; }
	SNAPSHOT_TYPE=$(sed -n -e 's#^.*<type>\([^<]*\)</type>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER type: sed failed"; }
	SNAPSHOT_UID=$(sed -n -e 's#^.*<uid>\([^<]*\)</uid>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER uid: sed failed"; }
	SNAPSHOT_DESCRIPTION=$(sed -n -e 's#^.*<description>\([^<]*\)</description>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER description: sed failed"; }

	SNAPSHOT_CLEANUP=$(sed -n -e 's#^.*<cleanup>\([^<]*\)</cleanup>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER cleanup policy: sed failed"; }
	if [ "$SNAPSHOT_CLEANUP" = "timeline" ]
	then
		echo "(Skipping due to cleanup policy \"$SNAPSHOT_CLEANUP\": Date $SNAPSHOT_DATE type $SNAPSHOT_TYPE${SNAPSHOT_UID:+ uid $SNAPSHOT_UID}${SNAPSHOT_CLEANUP:+ cleanup $SNAPSHOT_CLEANUP}: \"$SNAPSHOT_DESCRIPTION\")"
		continue
	fi

	echo -n "Date $SNAPSHOT_DATE type $SNAPSHOT_TYPE${SNAPSHOT_UID:+ uid $SNAPSHOT_UID}${SNAPSHOT_CLEANUP:+ cleanup $SNAPSHOT_CLEANUP}: \"$SNAPSHOT_DESCRIPTION\": "

	if [ -z "$LAST_SNAPSHOT_NUMBER" ]
	then
		echo -n "Full send: "
		echo "Would btrfs send without parent, but not implemented, yet"
	else
		echo -n "Incremental send with parent $LAST_SNAPSHOT_NUMBER: "
		echo "Would btrfs send with parent $LAST_SNAPSHOT_NUMBER, but not implemented, yet"
	fi
	LAST_SNAPSHOT_NUMBER="$SNAPSHOT_NUMBER"
done < <(ls -1d [1-9]* | sort -n)

exit 0
