#!/bin/bash

set -o pipefail

warn() {
	echo "${0##*/}: $*" >&2
}

die() {
	warn "Fatal: $*"
	exit 1
}


CST_DIR="$(dirname "$0")"
. "$CST_DIR/liblog.sh" || die "Failed to source shell library liblog.sh"
. "$CST_DIR/libbtrfs.sh" || die "Failed to source shell library libbtrfs.sh"


CST_USAGE="Usage: $0 OUTPUT_SUBVOL"

CST_THIS_SIDE="CVNSNAPPER_REPLICATE_RECEIVER"
CST_THIS_PROTO_MIN=0
CST_THIS_PROTO=2


[ "$#" -ge 1 ] || die "$CST_USAGE"

CST_OUTPUT_SUBVOL="$1"; shift

[ "$#" -eq 0 ] || die "Too many arguments! $CST_USAGE"


is_subvol "$CST_OUTPUT_SUBVOL" || die "Output subvolume is not a subvolume: \"$CST_OUTPUT_SUBVOL\""

[ "$(btrfs property get "$CST_OUTPUT_SUBVOL" ro)" = "ro=true" ] || die "Output subvolume is not read-only: \"$CST_OUTPUT_SUBVOL\""


CST_OUTPUT_SNAPSHOTS="$CST_OUTPUT_SUBVOL/.snapshots"

is_subvol "$CST_OUTPUT_SNAPSHOTS" || die "Output snapper .snapshots subvolume is not a subvolume: \"$CST_OUTPUT_SNAPSHOTS\""

[ "$(btrfs property get "$CST_OUTPUT_SNAPSHOTS" ro)" = "ro=false" ] || die "Output snapper .snapshots subvolume *is* read-only though it shouldn't: \"$CST_OUTPUT_SNAPSHOTS\""


CST_SNAPSHOT_NUMBER="$(cd "$CST_OUTPUT_SNAPSHOTS" && ls -1d [1-9]* | sort -n | tail -1)" || die "Can't determine initial last snapshot number: Pipe failed"
[ -n "$CST_SNAPSHOT_NUMBER" ] || die "Can't determine initial last snapshot number: Result was empty"
is_number "$CST_SNAPSHOT_NUMBER" || die "Can't determine initial last snapshot number: Result does not validate as number"


protomsg_receivedUUID() {
	[ -n "$CST_SNAPSHOT_NUMBER" ] || die "Can't send protocol message \"receivedUUID\" as the current snapshot number is not set"

	CST_SNAP="$CST_OUTPUT_SNAPSHOTS/$CST_SNAPSHOT_NUMBER/snapshot"
	is_subvol "$CST_SNAP" || die "Snapshot \"$CST_SNAP\" is not a subvolume"
	CST_RECEIVED_UUID="$(subvol_get_received_uuid "$CST_SNAP")" || die "Couldn't retrieve received UUID for snapshot \"$CST_SNAPSHOT_NUMBER\""
	[ "$CST_RECEIVED_UUID" = "-" ] && die "Received UUID for snapshot \"$CST_SNAPSHOT_NUMBER\" invalid: \"$CST_RECEIVED_UUID\""

	echo "$CST_THIS_SIDE receivedUUID $CST_SNAPSHOT_NUMBER $CST_RECEIVED_UUID"
}


# Get the conversation going...
echo "$CST_THIS_SIDE proto $CST_THIS_PROTO"
echo "$CST_THIS_SIDE have $CST_SNAPSHOT_NUMBER"

CST_EXPECTED_OTHER_SIDE="CVNSNAPPER_REPLICATE_SENDER"
CST_STATE_OTHER_PROTO=
CST_STATE_OTHER_MSGNUM=0

CST_RECEIVED_SNAPNUMS=

CST_GOT_END=
while read CST_OTHER_SIDE CST_OTHER_WHAT CST_OTHER_REST
do
	[ "$CST_OTHER_SIDE" = "$CST_EXPECTED_OTHER_SIDE" ] || die "Invalid other side message: By \"$CST_OTHER_SIDE\" (expected \"$CST_EXPECTED_OTHER_SIDE\")"
	: $((CST_STATE_OTHER_MSGNUM++))

	CST_BREAK=
	case "$CST_OTHER_WHAT" in
	proto)
		read CST_OTHER_PROTO CST_OTHER_REST <<<"$CST_OTHER_REST"
		[ -n "$CST_OTHER_PROTO" ] || die "Invalid other side message: \"proto\" message missing protocol number..."
		[ -n "$CST_OTHER_REST" ] && die "Invalid other side message: \"proto\" message with trailing data..."
		is_number "$CST_OTHER_PROTO" || die "Invalid other side message: \"proto\" message protocol number fails validation as number!"

		[ "$CST_STATE_OTHER_MSGNUM" -eq 1 ] || die "Other side protocol message must be first message!"
		[ -z "$CST_STATE_OTHER_PROTO" ] || die "Other side protocol has already been set! (to \"$CST_STATE_OTHER_PROTO\")"
		if [ "$CST_OTHER_PROTO" = "$CST_THIS_PROTO" ]
		then
			msg_debug "Other side's protocol \"$CST_OTHER_PROTO\" matches our side \"$CST_THIS_PROTO\""
		elif [ "$CST_OTHER_PROTO" -lt "$CST_THIS_PROTO" ]
		then
			msg_debug "Other side's protocol \"$CST_OTHER_PROTO\" is less than our side \"$CST_THIS_PROTO\""
			[ "$CST_OTHER_PROTO" -ge "$CST_THIS_PROTO_MIN" ] || die "Other side's protocol \"$CST_OTHER_PROTO\" is less than our side's minimum \"$CST_THIS_PROTO_MIN\", aborting"
		else
			die "Other side's protocol \"$CST_OTHER_PROTO\" not supported"
		fi
		CST_STATE_OTHER_PROTO="$CST_OTHER_PROTO"
		;;
	end)
		[ -z "$CST_OTHER_REST" ] || die "Invalid other side message: \"end\" message with trailing data..."
		CST_GOT_END=1
		CST_BREAK=1
		;;
	can)
		read CST_REQUESTED_SNAPSHOT_NUMBER CST_OTHER_REST <<<"$CST_OTHER_REST"
		[ -n "$CST_REQUESTED_SNAPSHOT_NUMBER" ] || die "Invalid other side message: \"can\" message is missing snapshot number"
		[ -n "$CST_OTHER_REST" ] && die "Invalid other side message: \"can\" message with trailing data..."
		is_number "$CST_REQUESTED_SNAPSHOT_NUMBER" || die "Invalid other side message: \"can\" message snapshot number fails validation as number!"

		[ "$CST_REQUESTED_SNAPSHOT_NUMBER" = "$CST_SNAPSHOT_NUMBER" ] || die "Backing off to more older snapshots not supported, yet!"
		protomsg_receivedUUID || die "Error in sending our next protocol message \"receivedUUID\" (after \"can\"), aborting"
		;;
	receive)
		read CST_RECEIVE_SNAPSHOT_NUMBER CST_OTHER_REST <<<"$CST_OTHER_REST"
		[ -n "$CST_RECEIVE_SNAPSHOT_NUMBER" ] || die "Invalid other side message: \"receive\" message is missing snapshot number"
		[ -n "$CST_OTHER_REST" ] && die "Invalid other side message: \"receive\" message with trailing data..."
		is_number "$CST_RECEIVE_SNAPSHOT_NUMBER" || die "Invalid other side message: \"receive\" message snapshot number fails validation as number!"

		[ "$CST_RECEIVE_SNAPSHOT_NUMBER" -gt "$CST_SNAPSHOT_NUMBER" ] || die "Receiving snapshot \"$CST_RECEIVE_SNAPSHOT_NUMBER\" is forbidden as it is not later than \"$CST_SNAPSHOT_NUMBER\""


		# Determine & prepare receiving directory (in snapper .snapshots subvol structure)...
		CST_OUTPUT_SNAPSHOT_DIR="$CST_OUTPUT_SNAPSHOTS/$CST_RECEIVE_SNAPSHOT_NUMBER"
		[ -e "$CST_OUTPUT_SNAPSHOT_DIR" ] && die "Receiving snapshot \"$CST_RECEIVE_SNAPSHOT_NUMBER\": Snapshot directory already exists"
		mkdir "$CST_OUTPUT_SNAPSHOT_DIR" || die "Receiving snapshot \"$CST_RECEIVE_SNAPSHOT_NUMBER\": Couldn't create snapshot directory"

		# Do the actual receive...
		btrfs receive -e "$CST_OUTPUT_SNAPSHOT_DIR/" >&2 || die "Receiving snapshot \"$CST_RECEIVE_SNAPSHOT_NUMBER\": Failed in \"btrfs receive\""
		# ^ The -e lets btrfs receive end at an end-marker, instead of only on EOF (which we don't have).
		#   The >&2 is an attempt to get the "At ..." message to the error stream, where it won't gobble up our protocol messages.
		CST_RECEIVED_SNAPNUMS="$CST_RECEIVED_SNAPNUMS $CST_RECEIVE_SNAPSHOT_NUMBER"

		# Since protocol 2, we'll also receive the snapper info.xml, in-band.
		if [ "$CST_STATE_OTHER_PROTO" -ge 2 ]
		then
			msg_debug "proto >= 2: Receiving info.xml ..."
			CST_OUTPUT_INFO="$CST_OUTPUT_SNAPSHOT_DIR/info.xml"
			( read THE_BASE64 || exit; umask 077 || exit; base64 --decode >"$CST_OUTPUT_INFO" <<<"$THE_BASE64" ) || die "Receiving snapshot \"$CST_RECEIVE_SNAPSHOT_NUMBER\": Failed in \"$CST_OUTPUT_INFO\" data"
			( read THE_DATE || exit; touch --date="$THE_DATE" "$CST_OUTPUT_INFO" ) || die "Receiving snapshot \"$CST_RECEIVE_SNAPSHOT_NUMBER\": Failed in \"$CST_OUTPUT_INFO\" timestamp"
		fi

		# Answer with received UUID, to get the protocol going again...
		CST_SNAPSHOT_NUMBER="$CST_RECEIVE_SNAPSHOT_NUMBER"
		protomsg_receivedUUID || die "Error in sending our next protocol message \"receivedUUID\" (after \"receive\"), aborting"
		;;
	*)
		die "Invalid other side message: Unrecognized message type \"$CST_OTHER_WHAT\""
		;;
	esac
	[ -n "$CST_BREAK" ] && break
done

if [ -z "$CST_GOT_END" ]
then
	# (Use warn although this is normal output, to not confuse the message protocol...)
	warn "Failing main operation. Received:${CST_RECEIVED_SNAPNUMS:- (none)}"

	die "Other side terminated without sending proper end message! Aborting (potential) post-operation..."
else
	# (Use warn although this is normal output, to not confuse the message protocol...)
	warn "Finished main operation. Received:${CST_RECEIVED_SNAPNUMS:- (none)}"
fi


# Post-operation. (As at the ~end of replicate-send.)
if [ -n "$CST_RECEIVED_SNAPNUMS" ]
then
	# Update the active subvol with the last received snapshot,
	# hanging the .snapshots subvol into there.
	"$CST_DIR/replace-active" "$CST_OUTPUT_SUBVOL" "$CST_SNAPSHOT_NUMBER" >&2 || die "Post-operation: Failed to update output active subvolume at \"$CST_OUTPUT_SUBVOL\""
	# ^ >&2 redirects the status message from stdout (where our
	#   message protocol is running over) to stderr.
fi


exit 0
