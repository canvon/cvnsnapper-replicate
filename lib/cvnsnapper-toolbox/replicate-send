#!/bin/bash

set -o pipefail

warn() {
	echo "${0##*/}: $*" >&2
}

die() {
	warn "Fatal: $*"
	exit 1
}


USAGE="Usage: $0 OUTPUT_PREFIX [LAST_SNAPSHOT_NUMBER]"

MODE="sendfiles"
SKIP_CLEANUPS="timeline"

while [ "$#" -ge 1 ] && [ "${1:0:1}" = "-" ]
do
	case "$1" in
	--help|--usage)
		shift
		echo "$USAGE"
		exit 0
		;;
	--files)
		MODE="sendfiles"
		shift
		SKIP_CLEANUPS="timeline"
		;;
	--receive)
		MODE="sendreceive"
		shift
		SKIP_CLEANUPS=
		;;
	*)
		die "Invalid option \"$1\""
		;;
	esac
done

[ "$#" -ge 1 ] || die "$USAGE"

OUTPUT_PREFIX="$1"; shift
LAST_SNAPSHOT_NUMBER_ARG=

[ "$#" -ge 1 ] && { LAST_SNAPSHOT_NUMBER_ARG="$1"; shift; }

[ "$#" -eq 0 ] || die "Too many arguments -- $USAGE"


LAST_SNAPSHOT_NUMBER_ARG_REACHED=0
LAST_SNAPSHOT_NUMBER=

if [ "$MODE" = "sendreceive" ]
then
	[ -d "$OUTPUT_PREFIX" ] || die "In mode $MODE, output prefix must be a directory"
	[ "$(stat -c '%i' "$OUTPUT_PREFIX")" -eq 256 ] || die "In mode $MODE, output prefix must be a subvolume"

	OUTPUT_SNAPSHOTS="$OUTPUT_PREFIX/.snapshots"
	[ -d "$OUTPUT_SNAPSHOTS" ] || die "Output prefix snapper .snapshots subvolume not found at \"$OUTPUT_SNAPSHOTS\""
	[ "$(stat -c '%i' "$OUTPUT_SNAPSHOTS")" -eq 256 ] || die "Output prefix snapper .snapshots subvolume not a subvolume at \"$OUTPUT_SNAPSHOTS\""

	if [ -z "$LAST_SNAPSHOT_NUMBER_ARG" ]
	then
		LAST_SNAPSHOT_NUMBER_ARG=$(cd "$OUTPUT_SNAPSHOTS" && ls -1d [1-9]* | sort -n | tail -1)
	fi

	if [ -n "$LAST_SNAPSHOT_NUMBER_ARG" ]
	then
		# Sanity check.
		CHECK_TEXT="connection between last output prefix snapshot and corresponding input snapshot"

		OUT_SNAP="$OUTPUT_SNAPSHOTS/$LAST_SNAPSHOT_NUMBER_ARG/snapshot"
		OUT_RECEIVED_UUID="$(btrfs subvolume show "$OUT_SNAP" | sed -n -e 's/^\s*Received UUID:\s*\([-0-9a-f]*\)$/\1/ip')"
		[ "$OUT_RECEIVED_UUID" = "-" ] && die "Failed to sanity-check $CHECK_TEXT: Invalid received UUID \"$OUT_RECEIVED_UUID\" of last output prefix snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\""
		if [ -z "$OUT_RECEIVED_UUID" ]
		then
			OUT_UUID="$(btrfs subvolume show "$OUT_SNAP" | sed -n -e 's/^\s*UUID:\s*\([-0-9a-f]*\)$/\1/ip')"
			[ -n "$OUT_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Couldn't get neither UUID nor recived UUID of last output prefix snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\""

			# -u: UUID, -R: received UUID
			OUT_RECEIVED_UUID="$(btrfs subvolume list -u -R "$OUT_SNAP" | sed -n -e "s/.* received_uuid \\([-0-9a-f]*\\) uuid $OUT_UUID .*/\\1/ip")"
			[ -n "$OUT_RECEIVED_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Couldn't get last output prefix snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\"'s received UUID, not even via fall-back method"
		fi

		IN_UUID="$(btrfs subvolume show "$LAST_SNAPSHOT_NUMBER_ARG/snapshot" | sed -n -e 's/^\s*UUID:\s*\([-0-9a-f]*\)$/\1/ip')"
		[ -n "$IN_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Couldn't get input snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\"'s UUID"

		[ "$OUT_RECEIVED_UUID" = "$IN_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Received UUID \"$OUT_RECEIVED_UUID\" doesn't match UUID \"$IN_UUID\""
	fi
fi

while read SNAPSHOT_NUMBER
do
	# Skip snapshots silently until last-arg, if last-arg was given.
	if [ -n "$LAST_SNAPSHOT_NUMBER_ARG" ] && [ "$LAST_SNAPSHOT_NUMBER_ARG_REACHED" -eq 0 ]
	then
		[ "$SNAPSHOT_NUMBER" -lt "$LAST_SNAPSHOT_NUMBER_ARG" ] && continue

		[ "$SNAPSHOT_NUMBER" -eq "$LAST_SNAPSHOT_NUMBER_ARG" ] || die "Last snapshot number \"$LAST_SNAPSHOT_NUMBER_ARG\" missing"

		LAST_SNAPSHOT_NUMBER_ARG_REACHED=1
		LAST_SNAPSHOT_NUMBER="$SNAPSHOT_NUMBER"

		# Sanity-check before trying to use this as parent later.
		[ -d "$SNAPSHOT_NUMBER/snapshot" ] || die "Snapshot under last snapshot number \"$LAST_SNAPSHOT_NUMBER_ARG\" missing"

		continue
	fi


	#
	# Consider snapshot number verbosely, and possibly skip.
	#

	echo -n "snapper snapshot number $SNAPSHOT_NUMBER: "

	SNAPSHOT_INFO="$SNAPSHOT_NUMBER/info.xml"
	[ -f "$SNAPSHOT_INFO" ] || { echo "(error)"; die "Missing info.xml at snapper snapshot number $SNAPSHOT_NUMBER"; }

	SNAPSHOT_NUM=$(sed -n -e 's#^.*<num>\([^<]*\)</num>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER num: sed failed"; }
	[ "$SNAPSHOT_NUMBER" = "$SNAPSHOT_NUM" ] || { echo "(error)"; die "Meta-data \"num\" does not match at snapper snapshot number $SNAPSHOT_NUMBER "; }

	SNAPSHOT_DATE=$(sed -n -e 's#^.*<date>\([^<]*\)</date>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER date: sed failed"; }
	SNAPSHOT_TYPE=$(sed -n -e 's#^.*<type>\([^<]*\)</type>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER type: sed failed"; }
	SNAPSHOT_UID=$(sed -n -e 's#^.*<uid>\([^<]*\)</uid>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER uid: sed failed"; }
	SNAPSHOT_DESCRIPTION=$(sed -n -e 's#^.*<description>\([^<]*\)</description>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER description: sed failed"; }

	SNAPSHOT_CLEANUP=$(sed -n -e 's#^.*<cleanup>\([^<]*\)</cleanup>.*#\1#p' <"$SNAPSHOT_INFO") || { echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER cleanup policy: sed failed"; }
	SKIP=0
	for SKIP_CLEANUP in $SKIP_CLEANUPS
	do
		if [ "$SNAPSHOT_CLEANUP" = "$SKIP_CLEANUP" ]
		then
			echo "(Skipping due to cleanup policy \"$SNAPSHOT_CLEANUP\": Date $SNAPSHOT_DATE type $SNAPSHOT_TYPE${SNAPSHOT_UID:+ uid $SNAPSHOT_UID}${SNAPSHOT_CLEANUP:+ cleanup $SNAPSHOT_CLEANUP}: \"$SNAPSHOT_DESCRIPTION\")"
			SKIP=1
			break
		fi
	done
	[ "$SKIP" -eq 0 ] || continue

	echo "Date $SNAPSHOT_DATE type $SNAPSHOT_TYPE${SNAPSHOT_UID:+ uid $SNAPSHOT_UID}${SNAPSHOT_CLEANUP:+ cleanup $SNAPSHOT_CLEANUP}: \"$SNAPSHOT_DESCRIPTION\""


	#
	# Do the btrfs send operation.
	#

	INPUT_SNAPSHOT="$SNAPSHOT_NUMBER/snapshot"
	[ -d "$INPUT_SNAPSHOT" ] || die "No input snapshot under snapshot number $SNAPSHOT_NUMBER"

	if [ -z "$LAST_SNAPSHOT_NUMBER" ]
	then
		echo -n "Full send: "

		case "$MODE" in
		sendfiles)
			OUTPUT_FILE="${OUTPUT_PREFIX}-${SNAPSHOT_NUMBER}-full.btrfs_send"
			[ -e "$OUTPUT_FILE" ] && { echo "(error)"; die "Output file \"$OUTPUT_FILE\" already exists"; }

			btrfs send -f "$OUTPUT_FILE" "$INPUT_SNAPSHOT" || { echo "(error)"; die "While doing full send of snapshot number $SNAPSHOT_NUMBER: btrfs send failed"; }
			;;
		sendreceive)
			OUTPUT_SNAPSHOT_DIR="$OUTPUT_SNAPSHOTS/$SNAPSHOT_NUMBER"
			mkdir "$OUTPUT_SNAPSHOT_DIR" || { echo "(error)"; die "Couldn't create output snapper .snapshots sub-directory \"$OUTPUT_SNAPSHOT_DIR\""; }
			btrfs send "$INPUT_SNAPSHOT" | btrfs receive "$OUTPUT_SNAPSHOT_DIR" || { CODE="$?"; echo "(error)"; die "While doing full send-receive of snapshot number $SNAPSHOT_NUMBER: btrfs send|receive pipeline failed (with code $CODE)"; }
			# After successful receive, transfer snapper meta-data,
			# as well, to give a snapper for the destination
			# the chance to list and handle the snapshot.
			# (Note that line has already been ended by btrfs output.)
			cp -a "$SNAPSHOT_INFO" "$OUTPUT_SNAPSHOT_DIR/" || die "Copying snapshot info \"$SNAPSHOT_INFO\" to output snapshot directory \"$OUTPUT_SNAPSHOT_DIR\" failed (with code $?)"
			;;
		*)
			echo "(error)"
			die "Unsupported mode-of-operation \"$MODE\""
			;;
		esac
	else
		INPUT_PARENT_SNAPSHOT="$LAST_SNAPSHOT_NUMBER/snapshot"
		[ -d "$INPUT_PARENT_SNAPSHOT" ] || die "No parent snapshot under last snapshot number $LAST_SNAPSHOT_NUMBER"

		echo -n "Incremental send with parent $LAST_SNAPSHOT_NUMBER: "

		case "$MODE" in
		sendfiles)
			OUTPUT_FILE="${OUTPUT_PREFIX}-${SNAPSHOT_NUMBER}.btrfs_send"
			[ -e "$OUTPUT_FILE" ] && { echo "(error)"; die "Output file \"$OUTPUT_FILE\" already exists"; }

			btrfs send -f "$OUTPUT_FILE" -p "$INPUT_PARENT_SNAPSHOT" "$INPUT_SNAPSHOT" || { echo "(error)"; die "While doing incremental send of snapshot number $SNAPSHOT_NUMBER with parent $LAST_SNAPSHOT_NUMBER: btrfs send failed"; }
			;;
		sendreceive)
			OUTPUT_SNAPSHOT_DIR="$OUTPUT_SNAPSHOTS/$SNAPSHOT_NUMBER"
			mkdir "$OUTPUT_SNAPSHOT_DIR" || { echo "(error)"; die "Couldn't create output snapper .snapshots sub-directory \"$OUTPUT_SNAPSHOT_DIR\""; }
			btrfs send -p "$INPUT_PARENT_SNAPSHOT" "$INPUT_SNAPSHOT" | btrfs receive "$OUTPUT_SNAPSHOT_DIR" || { CODE="$?"; echo "(error)"; die "While doing incremental send-receive of snapshot number $SNAPSHOT_NUMBER with parent $LAST_SNAPSHOT_NUMBER: btrfs send|receive pipeline failed (with code $CODE)"; }
			cp -a "$SNAPSHOT_INFO" "$OUTPUT_SNAPSHOT_DIR/" || die "Copying snapshot info \"$SNAPSHOT_INFO\" to output snapshot directory \"$OUTPUT_SNAPSHOT_DIR\" failed (with code $?)"
			;;
		*)
			echo "(error)"
			die "Unsupported mode-of-operation \"$MODE\""
			;;
		esac
	fi
	LAST_SNAPSHOT_NUMBER="$SNAPSHOT_NUMBER"
done < <(ls -1d [1-9]* | sort -n)

# Post-operation.
if [ "$MODE" = "sendreceive" ]
then
	# Update the "main" subvol with the last snapshot,
	# then hang the .snapshots subvol into there.
	echo "Post-operation: Update output main subvolume, at \"$OUTPUT_PREFIX\" ..."

	[ -n "$LAST_SNAPSHOT_NUMBER" ] || die "Post-operation: Can't update main subvolume as there was no last snapshot number!"
	[ "$(btrfs property get "$OUTPUT_PREFIX" ro)" = "ro=true" ] || die "Post-operation: Can't update main subvolume as it was not set read-only, before"
	btrfs property set "$OUTPUT_PREFIX" ro false || die "Post-operation: Couldn't update main subvolume: Couldn't set read-write"

	btrfs subvolume snapshot "$OUTPUT_SNAPSHOTS/$LAST_SNAPSHOT_NUMBER/snapshot" "$OUTPUT_PREFIX.new" || die "Post-operation: Couldn't update main subvolume: Making snapshot of last snapshot $LAST_SNAPSHOT_NUMBER failed"
	OUT_SNAPS_DIR="$OUTPUT_PREFIX.new/.snapshots"
	if [ -d "$OUT_SNAPS_DIR" ]
	then
		rmdir "$OUT_SNAPS_DIR" || die "Post-operation: Couldn't update main subvolume: Removing empty subvolume-placeholder directory \"$OUT_SNAPS_DIR\" failed"
	fi
	mv "$OUTPUT_PREFIX/.snapshots" "$OUTPUT_PREFIX.new/" || die "Post-operation: Couldn't update main subvolume: Hanging snapper .snapshots subvolume into snapshot of last snapshot failed"
	ATTENTION="ATTENTION: snapper .snapshots subvolume has already been hung into \"$OUTPUT_PREFIX.new/\"!"

	btrfs subvolume delete "$OUTPUT_PREFIX" || die "Post-operation: Couldn't update main subvolume: Deleting previous version failed. $ATTENTION"
	mv "$OUTPUT_PREFIX.new" "$OUTPUT_PREFIX" || die "Post-operation: Couldn't update main subvolume: Placing new version at old name failed. $ATTENTION"
	btrfs property set "$OUTPUT_PREFIX" ro true || die "Post-operation: Couldn't update main subvolume: Couldn't set read-only; but would be necessary for next $0 run"
fi

exit 0
