#!/bin/bash

set -o pipefail

warn() {
	echo "${0##*/}: $*" >&2
}

die() {
	warn "Fatal: $*"

	# Close SSH stdin pipe fd, to allow the connection to die.
	# (But, in fact, doesn't seem to help. ..?)
	if [ -n "$CST_SSH_STDIN" ]
	then
		exec {CST_SSH_STDIN}>&- || warn "Failed to close SSH standard input"
	fi

	exit 1
}

CST_SHELL_CLEANUP_RAN=
CST_TMP_DIR=
CST_SSH_PID=
shell_cleanup() {
	[ -n "$CST_SHELL_CLEANUP_RAN" ] && return 0
	CST_SHELL_CLEANUP_RAN=1

	SIG=
	[ "$#" -ge 1 ] && { SIG="$1"; shift; }
	FAIL=0
	if [ -n "$CST_TMP_DIR" ] && [ -d "$CST_TMP_DIR" ]
	then
		rm -r "$CST_TMP_DIR" || FAIL=1
		CST_TMP_DIR=
	fi

	if [ -n "$CST_SSH_PID" ]
	then
		kill "$CST_SSH_PID" || FAIL=1
		CST_SSH_PID=
	fi

	# Re-raise signal.
	case "$SIG" in
	"")
		;;
	EXIT)
		trap - "$SIG"
		exit "$FAIL"
		;;
	*)
		trap - "$SIG"
		kill -"$SIG" "$$"
		;;
	esac
}
trap 'shell_cleanup TERM' TERM
trap 'shell_cleanup INT'  INT
trap 'shell_cleanup HUP'  HUP
trap 'shell_cleanup EXIT' EXIT

CST_DIR="$(dirname "$0")"
. "$CST_DIR/liblog.sh" || die "Failed to source shell library liblog.sh"


USAGE="Usage: $0 OUTPUT_PREFIX [LAST_SNAPSHOT_NUMBER]"

MODE="sendfiles"
SKIP_CLEANUPS="timeline"

while [ "$#" -ge 1 ] && [ "${1:0:1}" = "-" ]
do
	case "$1" in
	--help|--usage)
		shift
		echo "$USAGE"
		exit 0
		;;
	--files)
		MODE="sendfiles"
		shift
		SKIP_CLEANUPS="timeline"
		;;
	--receive)
		MODE="sendreceive"
		shift
		SKIP_CLEANUPS=
		;;
	--remote=*)
		MODE="remote"
		REMOTE_HOST="${1#--remote=}"
		shift
		SKIP_CLEANUPS=
		;;
	*)
		die "Invalid option \"$1\""
		;;
	esac
done

[ "$#" -ge 1 ] || die "$USAGE"

OUTPUT_PREFIX="$1"; shift
LAST_SNAPSHOT_NUMBER_ARG=

[ "$#" -ge 1 ] && { LAST_SNAPSHOT_NUMBER_ARG="$1"; shift; }

[ "$#" -eq 0 ] || die "Too many arguments -- $USAGE"


LAST_SNAPSHOT_NUMBER_ARG_REACHED=0
LAST_SNAPSHOT_NUMBER=

main() {
if [ "$MODE" = "remote" ]
then
	exec {CST_SSH_STDOUT}<&0 || die "Couldn't duplicate main() stdin for continued reading from SSH"

	CST_THIS_SIDE="CVNSNAPPER_REPLICATE_SENDER"
	CST_EXPECTED_OTHER_SIDE="CVNSNAPPER_REPLICATE_RECEIVER"


	# Read initial message.
	read CST_OTHER_WHO CST_OTHER_WHAT CST_OTHER_REST <&"$CST_SSH_STDOUT" || die "Couldn't read initial message from remote host"

	[ "$CST_OTHER_WHO" = "$CST_EXPECTED_OTHER_SIDE" ] || die "Invalid other side message: By \"$CST_OTHER_WHO\""
	[ "$CST_OTHER_WHAT" = "have" ] || die "Unexpected initial message from other side: \"$CST_OTHER_WHAT\""

	if [ -z "$LAST_SNAPSHOT_NUMBER_ARG" ]
	then
		LAST_SNAPSHOT_NUMBER_ARG="$CST_OTHER_REST"
	else
		[ "$CST_OTHER_REST" -eq "$LAST_SNAPSHOT_NUMBER_ARG" ] || warn "Warning: Snapshot number the remote has, \"$CST_OTHER_REST\", and that we will be using, \"$LAST_SNAPSHOT_NUMBER_ARG\", don't match"
	fi

	echo "$CST_THIS_SIDE can $LAST_SNAPSHOT_NUMBER_ARG" >&"$CST_SSH_STDIN" || die "Couldn't send protocol message reply that we \"can\" snapshot number \"$LAST_SNAPSHOT_NUMBER_ARG\""


	read CST_OTHER_WHO CST_OTHER_WHAT CST_OTHER_REST <&"$CST_SSH_STDOUT" || die "Couldn't read 2nd message from remote host"

	[ "$CST_OTHER_WHO" = "$CST_EXPECTED_OTHER_SIDE" ] || die "Invalid other side message: By \"$CST_OTHER_WHO\""
	[ "$CST_OTHER_WHAT" = "receivedUUID" ] || die "Unexpected 2nd message from other side: \"$CST_OTHER_WHAT\""

	read CST_OTHER_SNAPSHOT_NUMBER OUT_RECEIVED_UUID <<<"$CST_OTHER_REST"
	[ -n "$CST_OTHER_SNAPSHOT_NUMBER" ] || die "Incomplete 2nd message from other side: Received UUID snapshot number missing!"
	[ -n "$OUT_RECEIVED_UUID" ] || die "Incomplete 2nd message from other side: Received UUID missing!"
	[ "$CST_OTHER_SNAPSHOT_NUMBER" = "$LAST_SNAPSHOT_NUMBER_ARG" ] || die "2nd message received UUID snapshot number \"$CST_OTHER_SNAPSHOT_NUMBER\" to our last snapshot number argument \"$LAST_SNAPSHOT_NUMBER_ARG\" mismatch, aborting"

	# Sanity check. (Read further down.)
	CHECK_TEXT="connection between last remote snapshot and corresponding local input snapshot"
elif [ "$MODE" = "sendreceive" ]
then
	[ -d "$OUTPUT_PREFIX" ] || die "In mode $MODE, output prefix must be a directory"
	[ "$(stat -c '%i' "$OUTPUT_PREFIX")" -eq 256 ] || die "In mode $MODE, output prefix must be a subvolume"

	OUTPUT_SNAPSHOTS="$OUTPUT_PREFIX/.snapshots"
	[ -d "$OUTPUT_SNAPSHOTS" ] || die "Output prefix snapper .snapshots subvolume not found at \"$OUTPUT_SNAPSHOTS\""
	[ "$(stat -c '%i' "$OUTPUT_SNAPSHOTS")" -eq 256 ] || die "Output prefix snapper .snapshots subvolume not a subvolume at \"$OUTPUT_SNAPSHOTS\""

	if [ -z "$LAST_SNAPSHOT_NUMBER_ARG" ]
	then
		LAST_SNAPSHOT_NUMBER_ARG=$(cd "$OUTPUT_SNAPSHOTS" && ls -1d [1-9]* | sort -n | tail -1)
	fi

	if [ -n "$LAST_SNAPSHOT_NUMBER_ARG" ]
	then
		# Sanity check.
		CHECK_TEXT="connection between last output prefix snapshot and corresponding input snapshot"

		OUT_SNAP="$OUTPUT_SNAPSHOTS/$LAST_SNAPSHOT_NUMBER_ARG/snapshot"
		OUT_RECEIVED_UUID="$(btrfs subvolume show "$OUT_SNAP" | sed -n -e 's/^\s*Received UUID:\s*\([-0-9a-f]*\)$/\1/ip')"
		[ "$OUT_RECEIVED_UUID" = "-" ] && die "Failed to sanity-check $CHECK_TEXT: Invalid received UUID \"$OUT_RECEIVED_UUID\" of last output prefix snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\""
		if [ -z "$OUT_RECEIVED_UUID" ]
		then
			OUT_UUID="$(btrfs subvolume show "$OUT_SNAP" | sed -n -e 's/^\s*UUID:\s*\([-0-9a-f]*\)$/\1/ip')"
			[ -n "$OUT_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Couldn't get neither UUID nor received UUID of last output prefix snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\""

			# -u: UUID, -R: received UUID
			OUT_RECEIVED_UUID="$(btrfs subvolume list -u -R "$OUT_SNAP" | sed -n -e "s/.* received_uuid \\([-0-9a-f]*\\) uuid $OUT_UUID .*/\\1/ip")"
			[ -n "$OUT_RECEIVED_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Couldn't get last output prefix snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\"'s received UUID, not even via fall-back method"
		fi
	fi
fi

case "$MODE" in
remote|sendreceive)
	IN_UUID="$(btrfs subvolume show "$LAST_SNAPSHOT_NUMBER_ARG/snapshot" | sed -n -e 's/^\s*UUID:\s*\([-0-9a-f]*\)$/\1/ip')"
	[ -n "$IN_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Couldn't get input snapshot \"$LAST_SNAPSHOT_NUMBER_ARG\"'s UUID"

	[ "$OUT_RECEIVED_UUID" = "$IN_UUID" ] || die "Failed to sanity-check $CHECK_TEXT: Received UUID \"$OUT_RECEIVED_UUID\" doesn't match UUID \"$IN_UUID\""
	;;
esac

while read SNAPSHOT_NUMBER
do
	# Skip snapshots silently until last-arg, if last-arg was given.
	if [ -n "$LAST_SNAPSHOT_NUMBER_ARG" ] && [ "$LAST_SNAPSHOT_NUMBER_ARG_REACHED" -eq 0 ]
	then
		[ "$SNAPSHOT_NUMBER" -lt "$LAST_SNAPSHOT_NUMBER_ARG" ] && continue

		[ "$SNAPSHOT_NUMBER" -eq "$LAST_SNAPSHOT_NUMBER_ARG" ] || die "Last snapshot number \"$LAST_SNAPSHOT_NUMBER_ARG\" missing"

		LAST_SNAPSHOT_NUMBER_ARG_REACHED=1
		LAST_SNAPSHOT_NUMBER="$SNAPSHOT_NUMBER"

		# Sanity-check before trying to use this as parent later.
		[ -d "$SNAPSHOT_NUMBER/snapshot" ] || die "Snapshot under last snapshot number \"$LAST_SNAPSHOT_NUMBER_ARG\" missing"

		continue
	fi


	#
	# Consider snapshot number verbosely, and possibly skip.
	#

	is_info && echo -n "snapper snapshot number $SNAPSHOT_NUMBER: "

	SNAPSHOT_INFO="$SNAPSHOT_NUMBER/info.xml"
	[ -f "$SNAPSHOT_INFO" ] || { is_info && echo "(error)"; die "Missing info.xml at snapper snapshot number $SNAPSHOT_NUMBER"; }

	SNAPSHOT_NUM=$(sed -n -e 's#^.*<num>\([^<]*\)</num>.*#\1#p' <"$SNAPSHOT_INFO") || { is_info && echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER num: sed failed"; }
	[ "$SNAPSHOT_NUMBER" = "$SNAPSHOT_NUM" ] || { is_info && echo "(error)"; die "Meta-data \"num\" does not match at snapper snapshot number $SNAPSHOT_NUMBER "; }

	SNAPSHOT_DATE=$(sed -n -e 's#^.*<date>\([^<]*\)</date>.*#\1#p' <"$SNAPSHOT_INFO") || { is_info && echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER date: sed failed"; }
	SNAPSHOT_TYPE=$(sed -n -e 's#^.*<type>\([^<]*\)</type>.*#\1#p' <"$SNAPSHOT_INFO") || { is_info && echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER type: sed failed"; }
	SNAPSHOT_UID=$(sed -n -e 's#^.*<uid>\([^<]*\)</uid>.*#\1#p' <"$SNAPSHOT_INFO") || { is_info && echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER uid: sed failed"; }
	SNAPSHOT_DESCRIPTION=$(sed -n -e 's#^.*<description>\([^<]*\)</description>.*#\1#p' <"$SNAPSHOT_INFO") || { is_info && echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER description: sed failed"; }

	SNAPSHOT_CLEANUP=$(sed -n -e 's#^.*<cleanup>\([^<]*\)</cleanup>.*#\1#p' <"$SNAPSHOT_INFO") || { is_info && echo "(error)"; die "While extracting snapper snapshot number $SNAPSHOT_NUMBER cleanup policy: sed failed"; }
	SKIP=0
	for SKIP_CLEANUP in $SKIP_CLEANUPS
	do
		if [ "$SNAPSHOT_CLEANUP" = "$SKIP_CLEANUP" ]
		then
			if is_info
			then echo "(Skipping due to cleanup policy \"$SNAPSHOT_CLEANUP\": Date $SNAPSHOT_DATE type $SNAPSHOT_TYPE${SNAPSHOT_UID:+ uid $SNAPSHOT_UID}${SNAPSHOT_CLEANUP:+ cleanup $SNAPSHOT_CLEANUP}: \"$SNAPSHOT_DESCRIPTION\")"
			else echo "(Skipping snapshot number $SNAPSHOT_NUMBER: cleanup $SNAPSHOT_CLEANUP)"
			fi
			SKIP=1
			break
		fi
	done
	[ "$SKIP" -eq 0 ] || continue

	is_info && echo "Date $SNAPSHOT_DATE type $SNAPSHOT_TYPE${SNAPSHOT_UID:+ uid $SNAPSHOT_UID}${SNAPSHOT_CLEANUP:+ cleanup $SNAPSHOT_CLEANUP}: \"$SNAPSHOT_DESCRIPTION\""


	#
	# Do the btrfs send operation.
	#

	INPUT_SNAPSHOT="$SNAPSHOT_NUMBER/snapshot"
	[ -d "$INPUT_SNAPSHOT" ] || die "No input snapshot under snapshot number $SNAPSHOT_NUMBER"

	if [ -z "$LAST_SNAPSHOT_NUMBER" ]
	then
		echo -n "Full send of $SNAPSHOT_NUMBER: "

		case "$MODE" in
		sendfiles)
			OUTPUT_FILE="${OUTPUT_PREFIX}-${SNAPSHOT_NUMBER}-full.btrfs_send"
			[ -e "$OUTPUT_FILE" ] && { echo "(error)"; die "Output file \"$OUTPUT_FILE\" already exists"; }

			btrfs send -f "$OUTPUT_FILE" "$INPUT_SNAPSHOT" || { echo "(error)"; die "While doing full send of snapshot number $SNAPSHOT_NUMBER: btrfs send failed"; }
			;;
		sendreceive)
			OUTPUT_SNAPSHOT_DIR="$OUTPUT_SNAPSHOTS/$SNAPSHOT_NUMBER"
			mkdir "$OUTPUT_SNAPSHOT_DIR" || { echo "(error)"; die "Couldn't create output snapper .snapshots sub-directory \"$OUTPUT_SNAPSHOT_DIR\""; }
			btrfs send "$INPUT_SNAPSHOT" | btrfs receive "$OUTPUT_SNAPSHOT_DIR" || { CODE="$?"; echo "(error)"; die "While doing full send-receive of snapshot number $SNAPSHOT_NUMBER: btrfs send|receive pipeline failed (with code $CODE)"; }
			# After successful receive, transfer snapper meta-data,
			# as well, to give a snapper for the destination
			# the chance to list and handle the snapshot.
			# (Note that line has already been ended by btrfs output.)
			cp -a "$SNAPSHOT_INFO" "$OUTPUT_SNAPSHOT_DIR/" || die "Copying snapshot info \"$SNAPSHOT_INFO\" to output snapshot directory \"$OUTPUT_SNAPSHOT_DIR\" failed (with code $?)"
			;;
		remote)
			echo "(error)"
			die "Full send (of snapshot \"$SNAPSHOT_NUMBER\") not implemented, yet"
			;;
		*)
			echo "(error)"
			die "Unsupported mode-of-operation \"$MODE\""
			;;
		esac
	else
		INPUT_PARENT_SNAPSHOT="$LAST_SNAPSHOT_NUMBER/snapshot"
		[ -d "$INPUT_PARENT_SNAPSHOT" ] || die "No parent snapshot under last snapshot number $LAST_SNAPSHOT_NUMBER"

		echo -n "Incremental send from $LAST_SNAPSHOT_NUMBER to $SNAPSHOT_NUMBER: "

		case "$MODE" in
		sendfiles)
			OUTPUT_FILE="${OUTPUT_PREFIX}-${SNAPSHOT_NUMBER}.btrfs_send"
			[ -e "$OUTPUT_FILE" ] && { echo "(error)"; die "Output file \"$OUTPUT_FILE\" already exists"; }

			btrfs send -f "$OUTPUT_FILE" -p "$INPUT_PARENT_SNAPSHOT" "$INPUT_SNAPSHOT" || { echo "(error)"; die "While doing incremental send of snapshot number $SNAPSHOT_NUMBER with parent $LAST_SNAPSHOT_NUMBER: btrfs send failed"; }
			;;
		sendreceive)
			OUTPUT_SNAPSHOT_DIR="$OUTPUT_SNAPSHOTS/$SNAPSHOT_NUMBER"
			mkdir "$OUTPUT_SNAPSHOT_DIR" || { echo "(error)"; die "Couldn't create output snapper .snapshots sub-directory \"$OUTPUT_SNAPSHOT_DIR\""; }
			btrfs send -p "$INPUT_PARENT_SNAPSHOT" "$INPUT_SNAPSHOT" | btrfs receive "$OUTPUT_SNAPSHOT_DIR" || { CODE="$?"; echo "(error)"; die "While doing incremental send-receive of snapshot number $SNAPSHOT_NUMBER with parent $LAST_SNAPSHOT_NUMBER: btrfs send|receive pipeline failed (with code $CODE)"; }
			cp -a "$SNAPSHOT_INFO" "$OUTPUT_SNAPSHOT_DIR/" || die "Copying snapshot info \"$SNAPSHOT_INFO\" to output snapshot directory \"$OUTPUT_SNAPSHOT_DIR\" failed (with code $?)"
			;;
		remote)
			echo "$CST_THIS_SIDE receive $SNAPSHOT_NUMBER" >&"$CST_SSH_STDIN" || die "Failed to send protocol message for the remote host to receive snapshot number \"$SNAPSHOT_NUMBER\""
			btrfs send -p "$INPUT_PARENT_SNAPSHOT" "$INPUT_SNAPSHOT" >&"$CST_SSH_STDIN" || die "Sending \"btrfs send\" stream to remote host failed"
			# TODO: Somehow also transfer the info.xml!

			read CST_OTHER_WHO CST_OTHER_WHAT CST_OTHER_REST <&"$CST_SSH_STDOUT" || die "Couldn't read send stream response message from remote host"
			[ "$CST_OTHER_WHO" = "$CST_EXPECTED_OTHER_SIDE" ] || die "Invalid other side message: By \"$CST_OTHER_WHO\""
			[ "$CST_OTHER_WHAT" = "receivedUUID" ] || die "Unexpected send stream response message from other side: \"$CST_OTHER_WHAT\""
			OUT_RECEIVED_UUID="$CST_OTHER_REST"
			[ -n "$OUT_RECEIVED_UUID" ] || die "Incomplete send stream response message from other side: Received UUID missing!"
			# TODO: Check received UUID against UUID of subvol we wanted to send?
			;;
		*)
			echo "(error)"
			die "Unsupported mode-of-operation \"$MODE\""
			;;
		esac
	fi
	LAST_SNAPSHOT_NUMBER="$SNAPSHOT_NUMBER"
done < <(ls -1d [1-9]* | sort -n)

if [ "$MODE" = "remote" ]
then
	echo "$CST_THIS_SIDE end" >&"$CST_SSH_STDIN" || die "Sending \"end\" message failed"
	warn "Waiting for remote side to finish..."
	read CST_OTHER_LINE <&"$CST_SSH_STDOUT" && die "Error! Remote side still had more to say! \"$CST_OTHER_LINE\""
fi

# Post-operation.
if [ "$MODE" = "sendreceive" ]
then
	# Update the "main" subvol with the last snapshot,
	# then hang the .snapshots subvol into there.
	echo "Post-operation: Update output main subvolume, at \"$OUTPUT_PREFIX\" ..."

	[ -n "$LAST_SNAPSHOT_NUMBER" ] || die "Post-operation: Can't update main subvolume as there was no last snapshot number!"
	[ "$(btrfs property get "$OUTPUT_PREFIX" ro)" = "ro=true" ] || die "Post-operation: Can't update main subvolume as it was not set read-only, before"
	btrfs property set "$OUTPUT_PREFIX" ro false || die "Post-operation: Couldn't update main subvolume: Couldn't set read-write"

	btrfs subvolume snapshot "$OUTPUT_SNAPSHOTS/$LAST_SNAPSHOT_NUMBER/snapshot" "$OUTPUT_PREFIX.new" || die "Post-operation: Couldn't update main subvolume: Making snapshot of last snapshot $LAST_SNAPSHOT_NUMBER failed"
	OUT_SNAPS_DIR="$OUTPUT_PREFIX.new/.snapshots"
	if [ -d "$OUT_SNAPS_DIR" ]
	then
		rmdir "$OUT_SNAPS_DIR" || die "Post-operation: Couldn't update main subvolume: Removing empty subvolume-placeholder directory \"$OUT_SNAPS_DIR\" failed"
	fi
	mv "$OUTPUT_PREFIX/.snapshots" "$OUTPUT_PREFIX.new/" || die "Post-operation: Couldn't update main subvolume: Hanging snapper .snapshots subvolume into snapshot of last snapshot failed"
	ATTENTION="ATTENTION: snapper .snapshots subvolume has already been hung into \"$OUTPUT_PREFIX.new/\"!"

	btrfs subvolume delete "$OUTPUT_PREFIX" || die "Post-operation: Couldn't update main subvolume: Deleting previous version failed. $ATTENTION"
	mv "$OUTPUT_PREFIX.new" "$OUTPUT_PREFIX" || die "Post-operation: Couldn't update main subvolume: Placing new version at old name failed. $ATTENTION"
	btrfs property set "$OUTPUT_PREFIX" ro true || die "Post-operation: Couldn't update main subvolume: Couldn't set read-only; but would be necessary for next $0 run"
fi
}  # End of main(), needed for piping SSH.

if [ "$MODE" = "remote" ]
then
	CST_TMP_DIR="$(mktemp -d)" || die "Couldn't create temporary directory for named pipes for SSH redirection"
	[ -n "$CST_TMP_DIR" ] || die "Couldn't create temporary directory for named pipes for SSH redirection: Result was empty"
	[ -d "$CST_TMP_DIR" ] || die "Couldn't create temporary directory for named pipes for SSH redirection: Is not a directory: \"$CST_TMP_DIR\""
	mkfifo --mode="700" "$CST_TMP_DIR/ssh_stdin"  || die "Couldn't create named pipe for SSH input redirection"
	#mkfifo --mode="700" "$CST_TMP_DIR/ssh_stdout" || die "Couldn't create named pipe for SSH output redirection"

	# Spawn SSH to other host.
	exec {CST_SSH_STDIN}<>"$CST_TMP_DIR/ssh_stdin" || die "SSH input redirection failed"
	[ -n "$CST_SSH_STDIN"  ] || die "Couldn't get SSH stdin fd redirection: Result is empty"
	#exec {CST_SSH_STDOUT}<>"$CST_TMP_DIR/ssh_stdout" || die "SSH output redirection failed"
	#[ -n "$CST_SSH_STDOUT" ] || die "Couldn't get SSH stdout fd redirection: Result is empty"
	${CVNSNAPPER_TOOLBOX_SSH:-ssh} \
		"$REMOTE_HOST" \
		${CVNSNAPPER_TOOLBOX_REMOTE_COMMAND:-cvnsnapper replicate-receive} "$OUTPUT_PREFIX" \
		<"$CST_TMP_DIR/ssh_stdin" \
		| main || die "\"ssh | main\" pipeline failed"
else
	main
fi

exit 0
