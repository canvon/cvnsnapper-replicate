#!/usr/bin/perl

use strict;
use warnings;

(our $basename = $0) =~ s#^.*/##;

$SIG{'__WARN__'} = sub { warn("$basename: ", @_); };
$SIG{'__DIE__'}  = sub { die ("$basename: Fatal: ", @_) unless $^S; die(@_); };


sub parse_stat_record {
	my ($record_str) = scalar(@_) ? @_ : ($_);
	my $record = {
		record_str => $record_str,
	};

	die("Cannot extract record's file string\n")
	  unless ($record_str =~ /^  File: (.*?)\n/);
	my $file_str = $1;
	$record->{'file_str'} = $file_str;

	my $openquote  = qr/\xe2\x80\x98/;
	my $closequote = qr/\xe2\x80\x99/;
	if ($file_str =~ /^$openquote?(.*?)$closequote? -> $openquote?(.*?)$closequote?$/) {
		$record->{'file_path'} = $1;
		$record->{'symlink_target'} = $2;
	}
	elsif ($file_str =~ /^$openquote?(.*?)$closequote?$/) {
		$record->{'file_path'} = $1;
	}
	else {
		die("Cannot extract record file string's file path\n");
	}

	return $record;
}

sub read_stat_records_from_fh {
	my ($fh) = @_;

	local $/ = undef;
	my $data = <$fh>;
	return split(/^(?=  File:)/m, $data);
}

sub read_stat_records_for_ctx {
	my ($ctx) = @_;

	my $base_path = $ctx->{'base_path'} or die("Internal error: context's base_path was not set");  # (no \n)
	my $stat_log_path = $base_path.".stat.log";
	$ctx->{'stat_log_path'} = $stat_log_path;

	open(my $stat_log_fh, '<', $stat_log_path) or die("Cannot open stat log at \"$stat_log_path\": $!\n");

	my @records = eval {
		map { parse_stat_record } (read_stat_records_from_fh($stat_log_fh));
	};
	if (scalar(@records) == 0 && $@) {
		die("Error processing stat log at \"$stat_log_path\": $@");  # (don't double the \n from $@)
	}
	$ctx->{'stat_records'} = \@records;

	close($stat_log_fh) or die("Cannot close stat log at \"$stat_log_path\": $!\n");

	return 1;
}

sub sort_stat_records {
	sort { $a->{'file_path'} cmp $b->{'file_path'} } (@_);
}

sub status_stat_recordss {
	my ($ref_records, $other_records) = @_;

	# TODO: Actually merge-compare the two sorted lists.
	print("Ref: ".scalar(@$ref_records).", Other: ".scalar(@$other_records)."\n");

	while (scalar(@$ref_records) >= 1 || scalar(@$other_records) >= 1) {
		if (scalar(@$ref_records) >= 1 && scalar(@$other_records) >= 1) {
			my $ref_rec   = $ref_records->[0];
			my $other_rec = $other_records->[0];

			my $comparison = $ref_rec->{'file_path'} cmp $other_rec->{'file_path'};
			if ($comparison == 0) {
				# TODO: Compare details and output difference,
				# if some was found, or else skip.
				print("? ".$other_rec->{'file_path'}."\n");

				# shift from both
				shift(@$ref_records);
				shift(@$other_records);
			}
			elsif ($comparison < 0) {
				print("- ".$ref_rec->{'file_path'}."\n");
				shift(@$ref_records);
			}
			else {
				print("+ ".$other_rec->{'file_path'}."\n");
				shift(@$other_records);
			}
		}
		elsif (scalar(@$ref_records) >= 1) {
			print("- ".$ref_records->[0]{'file_path'}."\n");
			shift(@$ref_records);
		}
		else {
			print("+ ".$other_records->[0]{'file_path'}."\n");
			shift(@$other_records);
		}
	}

	return 0;
}


our $usage = "Usage: $0 DIFF_SUBVOL_WITH_INFIX SUBVOL_WITH_INFIX";

while (scalar(@ARGV) >= 1 && $ARGV[0] =~ /^-/) {
	my $opt = shift;
	for ($opt) {
		if (/^--(help|usage)$/) {
			print("$usage\n");
			exit(0);
		}
		else {
			die("Invalid option \"$opt\"\n");
		}
	}
}

scalar(@ARGV) == 2 or die("$usage\n");

my ($ref_base_path, $other_base_path) = @ARGV;

my $ref_ctx   = { base_path => $ref_base_path   };
my $other_ctx = { base_path => $other_base_path };

foreach my $ctx ($ref_ctx, $other_ctx) {
	my $result = eval {
		read_stat_records_for_ctx($ctx) or die("Read stat records for context was unsuccessful\n");
	};
	if (!defined($result) && $@) {
		die("Error read-processing subvolume meta-data base path ".$ctx->{'base_path'}.": $@");  # (don't double the \n from $@)
	}
}

my $result = eval {
	status_stat_recordss(
		[ sort_stat_records(@{$ref_ctx->{'stat_records'}}) ],
		[ sort_stat_records(@{$other_ctx->{'stat_records'}}) ]
	);
};
if (!defined($result) && $@) {
	die("Error status-processing subvolumes' stat records: $@"); # (don't double the \n from $@)
}

exit($result);
