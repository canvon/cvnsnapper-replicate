#!/usr/bin/perl

use strict;
use warnings;

(our $basename = $0) =~ s#^.*/##;

$SIG{'__WARN__'} = sub { warn("$basename: ", @_); };
$SIG{'__DIE__'}  = sub { die ("$basename: Fatal: ", @_) unless $^S; die(@_); };


# Global state.
our @ignore_fields;


our @ignore_profiles_list = (
	{ profile_name => "same",       ignore_fields => [qw()], },
	{ profile_name => "snapshots",  ignore_fields => [qw(device)], },
	{ profile_name => "replicated", ignore_fields => [qw(device inode blocks ctime)], },
);

$ignore_profiles_list[0]->{'profile_name'} eq "same" and
$ignore_profiles_list[0]->{'description'} = <<EOF;
For taking the status between two cvnsnapper-plain-genmetadata runs
on the same subvolume. (e.g., no snapshots or replication are involved.)
This ignore profile is included for clarity only, and its list of
ignore fields is empty.
EOF

$ignore_profiles_list[1]->{'profile_name'} eq "snapshots" and
$ignore_profiles_list[1]->{'description'} = <<EOF;
At least one of the two input sets of meta-data is from a (different)
snapshot, so a status change in the device field is to be expected.
EOF

$ignore_profiles_list[2]->{'profile_name'} eq "replicated" and
$ignore_profiles_list[2]->{'description'} = <<EOF;
Replication has been involved, there will be many status differences
between the set of meta-data taken on the source and the destination
host. This profile's list of ignore fields contains filesystem meta-data
that is likely to always be different, but fields that pertain to
file meta-data that is transferrable will not be ignored.
EOF

our %ignore_profiles;
$ignore_profiles{$_->{'profile_name'}} = $_
  foreach (@ignore_profiles_list);


sub parse_stat_record {
	my ($record_str) = scalar(@_) ? @_ : ($_);
	my $record = {
		record_str => $record_str,
	};

	die("Cannot extract record's file string\n")
	  unless ($record_str =~ /^  File: (.*?)\n/);
	my $file_str = $1;
	$record->{'file_str'} = $file_str;

	my $openquote  = qr/\xe2\x80\x98/;
	my $closequote = qr/\xe2\x80\x99/;
	if ($file_str =~ /^$openquote?(.*?)$closequote? -> $openquote?(.*?)$closequote?$/) {
		$record->{'file_path'} = $1;
		$record->{'symlink_target'} = $2;
	}
	elsif ($file_str =~ /^$openquote?(.*?)$closequote?$/) {
		$record->{'file_path'} = $1;
	}
	else {
		die("Cannot extract record file string's file path\n");
	}

	die("Cannot extract record's size/blocks/IO_block/type\n")
	  unless ($record_str =~ /^  Size: (\d+)\s+Blocks: (\d+)\s+IO Block: (\d+)\s+(.*?)$/m);
	@$record{'size', 'blocks', 'io_block', 'type'} = ($1, $2, $3, $4);

	die("Cannot extract record's device_str/inode/nlinks[/device_type]\n")
	  unless ($record_str =~ /^Device: (\S+)\s+Inode: (\d+)\s+Links: (\d+)(?:\s+Device type:\s+([0-9a-f]+,[0-9a-f]+))?$/m);
	@$record{'device_str', 'inode', 'nlinks'} = ($1, $2, $3);
	$record->{'device_type'} = $4 if defined($4);
	my $device_str = $record->{'device_str'};

	die("Cannot parse record's device_str\n")
	  unless ($device_str =~ /^([0-9a-f]+)h\/([0-9]+)d$/);
	my ($device_hex, $device_dec) = ($1, $2);
	@$record{'device_hex', 'device_dec'} = ($device_hex, $device_dec);

	die("Parse of record's device_hex \"$device_hex\" vs. device_dec \"$device_dec\" is inconsistent\n")
	  unless (hex($device_hex) == $device_dec);
	$record->{'device'} = $device_dec;

	die("Cannot extract record's permissions/user/group\n")
	  unless ($record_str =~ /^Access: \((.*?)\)\s+Uid: \((.*?)\)\s+Gid: \((.*?)\)$/m);
	my ($perm_str, $uid_str, $gid_str) = ($1, $2, $3);
	@$record{'perm_str', 'uid_str', 'gid_str'} = ($perm_str, $uid_str, $gid_str);

	die("Cannot parse record's perm_str\n")
	  unless ($perm_str =~ /^\s*([0-7]+)\s*\/\s*([-A-Za-z]+)\s*$/);
	@$record{'perm_oct', 'perm_long'} = ($1, $2);

	die("Cannot parse record's uid_str\n")
	  unless ($uid_str =~ /^\s*([0-9]+)\s*\/\s*(\S+)\s*$/);
	@$record{'uid', 'user'} = ($1, $2);

	die("Cannot parse record's gid_str\n")
	  unless ($gid_str =~ /^\s*([0-9]+)\s*\/\s*(\S+)\s*$/);
	@$record{'gid', 'group'} = ($1, $2);

	die("Cannot extract record's access time\n")
	  unless ($record_str =~ /^Access:\s+([0-9].*)$/m);
	$record->{'atime'} = $1;

	die("Cannot extract record's modification time\n")
	  unless ($record_str =~ /^Modify:\s+([0-9].*)$/m);
	$record->{'mtime'} = $1;

	die("Cannot extract record's status change time\n")
	  unless ($record_str =~ /^Change:\s+([0-9].*)$/m);
	$record->{'ctime'} = $1;

	die("Cannot extract record's birth time\n")
	  unless ($record_str =~ /^ Birth:\s+(-|[0-9].*)$/m);
	$record->{'btime'} = $1;

	return $record;
}

sub diff_stat_records {
	my ($ref_rec, $other_rec) = @_;
	my @diff_fields;

	my $compare_str = sub { $_[0] eq $_[1] };
	my $compare_num = sub { $_[0] == $_[1] };
	my $field_comparisons = [
		{ field_name => 'file_path',      comparison => $compare_str },
		{ field_name => 'symlink_target', comparison => $compare_str },
		{ field_name => 'checksum',       comparison => $compare_str },
		{ field_name => 'size',           comparison => $compare_num },
		{ field_name => 'blocks',         comparison => $compare_num },
		{ field_name => 'io_blocks',      comparison => $compare_num },
		{ field_name => 'type',           comparison => $compare_str },
		{ field_name => 'device',         comparison => $compare_num },
		{ field_name => 'inode',          comparison => $compare_num },
		{ field_name => 'nlinks',         comparison => $compare_num },
		{ field_name => 'device_type',    comparison => $compare_str },
		{ field_name => 'perm_oct',       comparison => $compare_num },
		{ field_name => 'perm_long',      comparison => $compare_str },
		{ field_name => 'uid',            comparison => $compare_num },
		{ field_name => 'gid',            comparison => $compare_num },
		{ field_name => 'user',           comparison => $compare_str },
		{ field_name => 'group',          comparison => $compare_str },
		{ field_name => 'atime',          comparison => $compare_str },
		{ field_name => 'mtime',          comparison => $compare_str },
		{ field_name => 'ctime',          comparison => $compare_str },
		{ field_name => 'btime',          comparison => $compare_str },
	];

	foreach my $field_comparison (@$field_comparisons) {
		my ($field_name, $comparison) = @$field_comparison{'field_name', 'comparison'};
		next if (grep { $_ eq $field_name } (@ignore_fields));

		if (exists($ref_rec->{$field_name}) && exists($other_rec->{$field_name})) {
			push(@diff_fields, $field_name)
			  unless ($comparison->($ref_rec->{$field_name}, $other_rec->{$field_name}));
		}
		elsif (exists($ref_rec->{$field_name}) xor exists($other_rec->{$field_name})) {
			push(@diff_fields, $field_name);
		}
	}

	return @diff_fields;
}

sub read_stat_records_from_fh {
	my ($fh) = @_;

	local $/ = undef;
	my $data = <$fh>;
	return split(/^(?=  File:)/m, $data);
}

sub read_stat_records_for_ctx {
	my ($ctx) = @_;

	my $base_path = $ctx->{'base_path'} or die("Internal error: context's base_path was not set");  # (no \n)
	my $stat_log_path = $base_path.".stat.log";
	$ctx->{'stat_log_path'} = $stat_log_path;

	open(my $stat_log_fh, '<', $stat_log_path) or die("Cannot open stat log at \"$stat_log_path\": $!\n");

	my $record_num = 0;
	my @records = eval {
		map { $record_num++; parse_stat_record } (read_stat_records_from_fh($stat_log_fh));
	};
	if (scalar(@records) == 0 && $@) {
		die("Error processing stat log at \"$stat_log_path\", record number $record_num: $@");  # (don't double the \n from $@)
	}
	$ctx->{'stat_records'} = \@records;

	close($stat_log_fh) or die("Cannot close stat log at \"$stat_log_path\": $!\n");

	return 1;
}

sub read_checksums_for_ctx {
	my ($ctx) = @_;

	my $base_path = $ctx->{'base_path'} or die("Internal error: context's base_path was not set");  # (no \n)
	my $checksums_path = $base_path.".sha256";
	$ctx->{'checksums_path'} = $checksums_path;

	open(my $checksums_fh, '<', $checksums_path) or die("Cannot open checksums at \"$checksums_path\": $!\n");

	my $checksums_by_file_path = eval {
		my $by_file_path = {};
		while (<$checksums_fh>) {
			die("Cannot extract checksum/file_path from \"$_\"\n")
			  unless (/^([0-9a-f]+) [ *](.*)$/);
			my ($checksum, $file_path) = ($1, $2);

			$by_file_path->{$file_path} = $checksum;
		}
		return $by_file_path;
	};
	if (!defined($checksums_by_file_path) && $@) {
		die("Error processing checksums at \"$checksums_path\": $@");  # (don't double the \n from $@)
	}
	$ctx->{'checksums_by_file_path'} = $checksums_by_file_path;

	close($checksums_fh) or die("Cannot close checksums at \"$checksums_path\": $!\n");

	return 1;
}

sub sort_stat_records {
	sort { $a->{'file_path'} cmp $b->{'file_path'} } (@_);
}

sub status_stat_recordss {
	my ($ref_ctx, $other_ctx) = @_;
	my $ref_records   = [ sort_stat_records(@{$ref_ctx->{'stat_records'}}) ];
	my $other_records = [ sort_stat_records(@{$other_ctx->{'stat_records'}}) ];

	print("Ref records: ".scalar(@$ref_records).", Other records: ".scalar(@$other_records)."\n");
	print("Ignoring fields: ".
		(scalar(@ignore_fields) ? join(',', @ignore_fields) : "(none)").
		"\n");

	# Merge-compare the two sorted lists.
	while (scalar(@$ref_records) >= 1 || scalar(@$other_records) >= 1) {
		if (scalar(@$ref_records) >= 1 && scalar(@$other_records) >= 1) {
			my $ref_rec   = $ref_records->[0];
			my $other_rec = $other_records->[0];

			my $comparison = $ref_rec->{'file_path'} cmp $other_rec->{'file_path'};
			if ($comparison == 0) {
				my $common_file_path = $other_rec->{'file_path'};

				# Augment stat record by fields from additional
				# meta-data sources.
				#
				# Make sure to forward a field only if *both*
				# subvolumes have the data source available.
				if (defined(my $ref_checksums   = $ref_ctx->{'checksums_by_file_path'}) &&
				    defined(my $other_checksums = $other_ctx->{'checksums_by_file_path'})) {
					# Forward field without producing
					# an existing key with an undef value.
					$ref_rec->{'checksum'} = $ref_checksums->{$common_file_path}
					  if (exists($ref_checksums->{$common_file_path}));
					$other_rec->{'checksum'} = $other_checksums->{$common_file_path}
					  if (exists($other_checksums->{$common_file_path}));
				}

				# Compare details and output difference,
				# if some was found.
				my @diff_fields = eval {
					diff_stat_records($ref_rec, $other_rec);
				};
				if (scalar(@diff_fields) == 0 && $@) {
					warn("Warning: Problem diffing stat record for file path \"$common_file_path\": $@");  # (don't double the \n from $@)
					print("? $common_file_path\n");
				}
				elsif (scalar(@diff_fields)) {
					print(join(',', @diff_fields)." $common_file_path\n");
				}

				# shift from both
				shift(@$ref_records);
				shift(@$other_records);
			}
			elsif ($comparison < 0) {
				print("- ".$ref_rec->{'file_path'}."\n");
				shift(@$ref_records);
			}
			else {
				print("+ ".$other_rec->{'file_path'}."\n");
				shift(@$other_records);
			}
		}
		elsif (scalar(@$ref_records) >= 1) {
			print("- ".$ref_records->[0]{'file_path'}."\n");
			shift(@$ref_records);
		}
		else {
			print("+ ".$other_records->[0]{'file_path'}."\n");
			shift(@$other_records);
		}
	}

	return 0;
}


our $usage = <<EOF;
Usage: $0 [--ignore-fields=...] [--ignore-profile=...] [OTHER_OPTIONS] DIFF_SUBVOL_WITH_INFIX SUBVOL_WITH_INFIX
Get status comparison between two sets of files representing btrfs snapshot/subvolume meta-data.
EOF
our $usage_long = <<EOF;
$usage
Options are:
  --help, --usage               This text.

  --ignore-fields=FIELDS,
  --add-ignore-fields=FIELDS    Add to list of fields to ignore.
  --set-ignore-fields=FIELDS    Override list collected so far.
                                FIELDS is a comma-separated list of field names.

  --ignore-profile=PROFILE,
  --add-ignore-profile=PROFILE  Add to list of fields to ignore.
  --set-ignore-profile=PROFILE  Override list collected so far.
                                PROFILE stands for a list of fields.
				Use the word "help" as PROFILE to get a list
				of supported values: --ignore-profile=help
EOF

while (scalar(@ARGV) >= 1 && $ARGV[0] =~ /^-/) {
	my $opt = shift;
	for ($opt) {
		my ($opt_name) = /^([^=]+)/;

		if (/^--(help|usage)$/) {
			print($usage_long);
			exit(0);
		}
		elsif (/^--(?:add-)?ignore-fields=(.*)$/) {
			push(@ignore_fields, split(/,/, $1));
		}
		elsif (/^--set-ignore-fields=(.*)$/) {
			@ignore_fields = split(/,/, $1);
		}
		elsif (/^--(?:(add|set)-)?ignore-profile=(.*)$/) {
			my $is_replace_mode = defined($1) && $1 eq "set";
			my $profile_requested = $2;
			if ($profile_requested =~ /^(?:help|usage)$/) {
				print("Supported status ignore profiles:");
				print(" ".$_->{'profile_name'})
				  foreach (@ignore_profiles_list);
				print("\n");

				# TODO: print("Use --usage-profile to get long descriptions.\n");

				exit(0);
			}

			my $ignore_profile = $ignore_profiles{$profile_requested};
			die("Invalid argument \"$profile_requested\" to option \"$opt_name\"; use $opt_name=help to get a list of supported values.\n")
			  unless defined($ignore_profile);

			if ($is_replace_mode) {
				@ignore_fields = @{$ignore_profile->{'ignore_fields'}};
			}
			else {
				push(@ignore_fields, @{$ignore_profile->{'ignore_fields'}});
			}
		}
		else {
			die("Invalid option \"$opt\"\n");
		}
	}
}

scalar(@ARGV) == 2 or die($usage);

my ($ref_base_path, $other_base_path) = @ARGV;

my $ref_ctx   = { base_path => $ref_base_path   };
my $other_ctx = { base_path => $other_base_path };

foreach my $ctx ($ref_ctx, $other_ctx) {
	my $result = eval {
		read_stat_records_for_ctx($ctx) or die("Read stat records for context was unsuccessful\n");
	};
	if (!defined($result) && $@) {
		die("Error read-processing subvolume meta-data for base path \"".$ctx->{'base_path'}."\": $@");  # (don't double the \n from $@)
	}

	$result = eval {
		read_checksums_for_ctx($ctx) or die("Read checksums for context was unsuccessful\n");
	};
	if (!defined($result) && $@) {
		warn("Ignoring error read-processing optional subvolume meta-data for base path \"".$ctx->{'base_path'}."\": $@");  # (don't double the \n from $@)
	}
}

my $result = eval {
	status_stat_recordss($ref_ctx, $other_ctx);
};
if (!defined($result) && $@) {
	die("Error status-processing subvolumes' stat records: $@"); # (don't double the \n from $@)
}

exit($result);
